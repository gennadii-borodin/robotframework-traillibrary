# -*- coding: utf-8 -*-

import re
import ast
from robot.libraries.BuiltIn import BuiltIn
from TRailLibrary.test_rail_adaptor import TestRailAdaptor



class TRailLibrary(object):
    """
    ``TRailLibrary`` is a Robot Framework listener library that allows to log test execution results
    to an instanse of Test Rail https://www.gurock.com/testrail Test Case management system

    After the library is imported it starts to listen test execution. When test is finished
    the libray finds the test tags that contain case ids and sends result to corresponding
    cases in Test Rail

    ``TRailLibrary`` sends to Test Rail the following information:
    - test status ``PASS`` or ``FAIL``
    - ``elapsedtime`` in seconds
    - ``path`` longname of the test in Robot Framework suite
    - ``tags`` all test case tags
    - ``message`` test result message


    = Linking test cases =

    Test cases linked throug special Robot Framework tags. Listener finds all tags that match
    the following regexp

    ``prefix(\d{0,}\d$)``

    where ``prefix`` is value of the appropriate `Importing` argument

    = Configurations =
    Test Rails configuration, if used, is passed as a dictionary
    by ``config`` `Importing` argumenet.\n
    Keys are names of Test Rail configuration groups\n
    Values are names of configurations

    | ``{'OS':'Windows', 'Browser':'Chrome'}``


    = Examples =

    In the following example execution result will be assined to case with id ``C1``
    in appropriate ``run_name``

    | ***** Test Cases *****
    | *Test With Test Rail tag*
    |    [Tags]    C1    dummy    owner-johndoe
    |    Log    Hello, world!

    If multiple tags specified all matched cases will receive test result

    | [Tags]    C1    C2    C45233    dummy    owner-johndoe

    C1, C2 and C45233 accordingly

    """
    
    ROBOT_LIBRARY_SCOPE = "GLOBAL"
    ROBOT_LISTENER_API_VERSION = 2
    

    def __init__(self, url=None, user=None, api_key=None, project=None,
                 plan=None, run_name=None, config='{}', prefix='C'):
        """
        TRailLibrary can be imported with the following arguments
        - ``url``: url of the Test Rail instance
        - ``user``: Test Rail account
        - ``api_key``: API key generated by Test Rail to authenticate requests
        - ``project``: Test Rail project name
        - ``plan``: Test Rail project name
        - ``run_name``: Test Rail run name
        - ``config``: optional dictionary of Test Rail configurations
        - ``prefix``: optional tag prefix

        *Example*
        | = Setting =  | = Value =    | = Value = | = Value = | = Value = | = Value = | = Value = | = Value = | = Value = | = Value = |
        | Library      | TRailLibrary | url=http:\\\\server | user=user@domain.com | api_key=my_key_here | project=My Project | plan=Test Plan | run_name=MyDailyRun | config={'OS':'Windows', 'Browser':'Chrome'} | prefix=C |

        """
        self.ROBOT_LIBRARY_LISTENER = self
        self.testrail_url = url
        self.user = user
        self.api_key = api_key
        self.project = project
        self.plan = plan
        self.tr_adaptor = None
        self.prefix = prefix
        self.run_name = run_name
        self.config = ast.literal_eval(config)

    def _set_connection(self):
        _adaptor = TestRailAdaptor(self.testrail_url, self.user, self.api_key)
        _adaptor.select_project(self.project)
        _adaptor.select_plan(self.plan)
        _adaptor.set_active_run(self.run_name, self.config)
        self.tr_adaptor = _adaptor

    def _end_test(self, name, attrs):
        self._set_connection()
        for tag in attrs['tags']:
            case_id = TRailLibrary._tag_to_caseid(tag, self.prefix)
            if case_id:
                pp_comment = TRailLibrary._pretty_print_test_comment(path=attrs['longname'],
                                                                     tags=attrs['tags'],
                                                                     message=attrs['message'])
                elapsed_s = int(attrs['elapsedtime'])/1000
                self.tr_adaptor.add_case_result(case_id, attrs['status'], self.run_name,
                                                self.config, comment=pp_comment,
                                                elapsed='{s} s'.format(s=elapsed_s))

    @staticmethod
    def _tag_to_caseid(tag, prefix):
        tag_st = str(tag)
        find_string = '^' + str(prefix) + r'(\d{0,}\d$)'
        match = re.findall(find_string, tag_st)
        if match:
            return int(match[0])
        return 0

    @staticmethod
    def _pretty_print_test_comment(header='EXECUTION INFO', **kwargs):
        comment = header + '\n\n'
        for key in kwargs:
            val = ''
            if isinstance(kwargs[key], list):
                val = ', '.join(str(x) for x in kwargs[key])
            else:
                val = kwargs[key]

            comment = comment + str(key) + ": " + val + '\n\n'
        return comment
